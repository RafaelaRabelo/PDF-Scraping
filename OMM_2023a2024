import os
import fitz  # PyMuPDF
import pandas as pd

# Definições
caminho_principal = "xxxx"
inicio_padroes = ["AHTS and PSV Term Day Rate Ranges"]
frases_finais = ["As of"]
caminho_csv = "xxxx"
arquivo_inicio = "2023 01 OMM.pdf"  # Nome do arquivo para começar a execução

# Lista de possíveis nomes de embarcação
nomes_embarcacoes = [
    'AHTS 3,000-5,999 BHP', 'AHTS 6,000-9,999 BHP', 'AHTS 10,000-14,999 BHP', 
    'AHTS 15,000-17,999 BHP', 'AHTS 18,000+ BHP', 'PSV 1,000-1,999 DWT','PSV 2,000-2,999 DWT','PSV 3,000-3,999 DWT','PSV 4,000+ DWT','AHTS 3000-5999 BHP',
    'AHTS 6000-9999 BHP','AHTS 10000-14999 BHP','AHTS 15000-17999 BHP','N/A AHTS 18000+ BHP','AHTS 18000+ BHP'
]

# Função para extrair texto usando PyMuPDF a partir da página 6 (índice 5)
def extrair_texto_pdf_pymupdf(caminho_pdf, pagina_inicial=5):
    try:
        doc = fitz.open(caminho_pdf)
        texto = ""
        for pagina_num in range(pagina_inicial, len(doc)):
            pagina = doc.load_page(pagina_num)
            texto += pagina.get_text()
        return texto.encode('utf-8').decode('utf-8'), doc
    except Exception as e:
        print(f"Erro ao abrir o PDF com PyMuPDF: {e}")
        return "", None

# Função para encontrar a tabela desejada
def encontrar_tabela(texto, inicio_padroes, finais):
    texto = texto.upper()  # Normaliza o texto para comparação
    pos_inicio = None

    for padrao in inicio_padroes:
        padrao_upper = padrao.upper()
        pos = texto.find(padrao_upper)
        if pos != -1 and (pos_inicio is None or pos < pos_inicio):
            pos_inicio = pos
    
    if pos_inicio is None:
        return ""

    fim_pos = len(texto)
    for frase_fim in finais:
        frase_fim_upper = frase_fim.upper()
        pos_fim = texto.find(frase_fim_upper, pos_inicio)
        if pos_fim != -1 and pos_fim < fim_pos:
            fim_pos = pos_fim
    
    if fim_pos > pos_inicio:
        tabela = texto[pos_inicio:fim_pos].strip()
        return tabela
    return ""

# Função para limpar nomes de embarcações das colunas
def limpar_nome_embarcacao(valor):
    for nome in nomes_embarcacoes:
        if nome in valor:
            return valor.replace(nome, '').strip()
    return valor

# Função para limpar e processar os dados extraídos
def processar_dados_brutos(tabela, nome_arquivo):
    if not tabela:
        print(f"Sem dados para processar no arquivo {nome_arquivo}.")
        return pd.DataFrame()

    # Limpar as linhas indesejadas e vazias
    lines = tabela.split('\n')
    lines = [line.strip() for line in lines if line.strip() and not line.startswith("USD Low") and not line.startswith("USD Avg") and not line.startswith("USD High")]

    # Estruturas para armazenar os dados
    parsed_data = []
    current_local = None
    current_embarcacao = None
    data_block = []

    def is_header(line):
        return line in ['USD Low', 'USD Avg', 'USD High']

    def process_data_block():
        if len(data_block) >= 3:
            parsed_data.append({
                'Arquivo': nome_arquivo,
                'Fonte': 'Offshore Marine Monthly',
                'Tipo de embarcacao': 'AHTS' if 'AHTS 18,000+ BHP' in current_embarcacao else 'Nao definido',
                'Local': current_local,
                'Embarcacao': current_embarcacao,
                'USD Low': limpar_nome_embarcacao(data_block.pop(0).replace(',', '').strip()),
                'USD Avg': limpar_nome_embarcacao(data_block.pop(0).replace(',', '').strip()),
                'USD High': limpar_nome_embarcacao(data_block.pop(0).replace(',', '').strip())
            })

    for line in lines:
        line = line.strip()
        
        if line in ['US GULF OF MEXICO', 'MEXICO', 'SOUTH AMERICA', 'NORTHWEST EUROPE', 'WEST AFRICA', 'MIDDLE EAST', 'INDIAN OCEAN', 'SOUTHEAST ASIA']:
            if current_local and current_embarcacao:
                process_data_block()
            current_local = line
            data_block = []
            continue

        if line.startswith('AHTS') or line.startswith('PSV'):
            if current_embarcacao and data_block:
                process_data_block()
            current_embarcacao = line
            continue

        if line and not is_header(line):
            data_block.append(line)

    if current_embarcacao and data_block:
        process_data_block()

    df = pd.DataFrame(parsed_data)
    df.replace('n/a', pd.NA, inplace=True)
    df.fillna('N/A', inplace=True)
    return df

# Função principal para processar PDFs e retornar o DataFrame
def processar_pdfs(diretorio_principal, arquivo_inicio):
    df_total = pd.DataFrame()
    processar = False

    for root, dirs, files in os.walk(diretorio_principal):
        for filename in files:
            if filename.endswith(".pdf"):
                if not processar:
                    if filename == arquivo_inicio:
                        processar = True  # Começar a processar a partir deste arquivo
                
                if processar:
                    caminho_pdf = os.path.join(root, filename)
                    print(f"Lendo o arquivo: {caminho_pdf}")
                    texto, doc = extrair_texto_pdf_pymupdf(caminho_pdf, pagina_inicial=5)
                    tabela = encontrar_tabela(texto, inicio_padroes, frases_finais)
                    if tabela:
                        df = processar_dados_brutos(tabela, filename)
                        df_total = pd.concat([df_total, df], ignore_index=True)
                    else:
                        print(f"Nenhuma tabela encontrada no arquivo: {caminho_pdf}")

    return df_total

# Executar a função principal e obter o DataFrame final
df_final = processar_pdfs(caminho_principal, arquivo_inicio)

# Salvar o DataFrame em um arquivo CSV
df_final.to_csv(caminho_csv, sep=';', decimal=',', index=False)

print(f"Dados salvos em: {caminho_csv}")
